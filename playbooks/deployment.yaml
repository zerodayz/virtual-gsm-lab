- name: Virtual GSM Lab Deployment
  hosts: localhost
  gather_facts: no
  vars:
    ssl_verify: false
  tasks:
    # Create a tmp directory for our GSM deployment
    - name: Create tmp directory
      file:
        path: ./tmp
        state: directory
        mode: "0755"
      become: false

    # Check if the image is already downloaded in that directory
    - name: Check if image exists
      stat:
        path: ./tmp/jammy-server-cloudimg-amd64-disk-kvm.img
      register: image_stat
      become: false

    # Verify md5sum of the image if the image exists
    - stat:
        path: ./tmp/jammy-server-cloudimg-amd64-disk-kvm.img
      register: image_sha1sum
      when: image_stat.stat.exists == true
      become: false

    # Compare the md5sum to c5723c9290a0e88d8e5d5415c7d58b53 and download the image if it doesn't match
    - name: Download Ubuntu 22.04
      get_url:
        url: https://cloud-images.ubuntu.com/jammy/current/jammy-server-cloudimg-amd64-disk-kvm.img
        dest: ./tmp/
        mode: "0666"
      register: imagename
      when: image_stat.stat.exists == false or image_sha1sum.stat.checksum != "78dc58ba728ecaaf9abd5f91cea77ba40a9b7060"
      become: false

    # Check if the flavor gsm-vlab with 25GB DISK and 4GB RAM already exists and create it if it doesn't.
    - name: Create flavor gsm-flavor.medium with 4GB RAM and 25GB disk
      os_nova_flavor:
        name: gsm-flavor.medium
        ram: 4096
        disk: 25
        vcpus: 1
        state: present
        verify: "{{ ssl_verify }}"

    # Import the downloaded image into Glance if it doesn't exist.
    - name: Import gsm-image.ubuntu-22.04 into Glance
      os_image:
        name: gsm-image.ubuntu-22.04
        container_format: bare
        disk_format: qcow2
        state: present
        filename: ./tmp/jammy-server-cloudimg-amd64-disk-kvm.img
        verify: "{{ ssl_verify }}"


    # Create private network, subnet, router, security group and security group rules if they don't exist.
    - name: Create network gsm-network.private
      os_network:
        name: gsm-network.private
        state: present
        verify: "{{ ssl_verify }}"

    - name: Create subnet gsm-subnet.private in network gsm-network.private
      os_subnet:
        name: gsm-subnet.private
        network_name: gsm-network.private
        cidr: 172.20.1.0/24
        state: present
        verify: "{{ ssl_verify }}"


    - name: Create router gsm-router with interface in gsm-subnet.private
      os_router:
        name: gsm-router
        state: present
        network: public
        interfaces:
         - gsm-subnet.private
        verify: "{{ ssl_verify }}"


    - name: Create security group gsm-security-group
      os_security_group:
        name: gsm-security-group
        state: present
        verify: "{{ ssl_verify }}"


    - name: Create security group rules for gsm-security-group
      os_security_group_rule:
        security_group: gsm-security-group
        protocol: "{{ item }}"
        remote_ip_prefix: 0.0.0.0/0
        verify: "{{ ssl_verify }}"
      loop:
        - tcp
        - icmp
        - udp

    # Generate a keypair and upload it to OpenStack if it doesn't exist.
    - name: Generate key gsm-admin_key
      openssh_keypair:
        path: ./tmp/gsm-admin_key
        type: rsa
        size: 4096
        state: present
        force: no

    - name: Upload key gsm-admin_key to OpenStack
      os_keypair:
        name: gsm_admin_key
        state: present
        public_key_file: ./tmp/gsm-admin_key.pub
        verify: "{{ ssl_verify }}"

    - name: Create BTS Server
      os_server:
        state: present
        name: BTS
        image: gsm-image.ubuntu-22.04
        key_name: gsm_admin_key
        timeout: "200"
        flavor: gsm-flavor.medium
        security_groups: gsm-security-group
        network: gsm-network.private
        verify: "{{ ssl_verify }}"